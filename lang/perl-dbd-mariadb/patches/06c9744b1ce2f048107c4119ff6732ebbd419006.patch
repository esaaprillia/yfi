From c10766f98b0396184b6cd12d5bfac71459b478c9 Mon Sep 17 00:00:00 2001
From: esaaprillia <esaapriliasalsabila@gmail.com>
Date: Wed, 4 Sep 2024 21:22:35 +0800
Subject: [PATCH] Update Makefile.PL

---
 Makefile.PL | 238 ----------------------------------------------------
 1 file changed, 238 deletions(-)

diff --git a/Makefile.PL b/Makefile.PL
index 078152f..52a91aa 100644
--- a/Makefile.PL
+++ b/Makefile.PL
@@ -9,7 +9,6 @@ use Config;
 use Getopt::Long;
 use ExtUtils::MakeMaker;
 use Data::Dumper;
-use Devel::CheckLib 1.12;
 use File::Spec;
 require DBI;
 require DBI::DBD;
@@ -227,192 +226,8 @@ MSG
 
 print "Checking if libs and header files are available for compiling...\n";
 
-assert_lib(
-  LIBS => (join ' ', @libdirs, $main_lib, @libs),
-  ccflags => (join ' ', $opt->{cflags}, ($Config{usedl} ? $Config{cccdlflags} : ())),
-  ldflags => (join ' ', @libdirs, @ldflags, ($Config{usedl} ? $Config{lddlflags} : ())),
-  header => \@mysql_headers,
-  not_execute => 1,
-);
-
-print "Checking if correct version of MariaDB or MySQL client is present...\n";
-
-check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags),
-  header => \@mysql_headers,
-  function => "\n#ifndef MYSQL_VERSION_ID\n#include <mysql_version.h>\n#endif\nreturn (MYSQL_VERSION_ID >= 40108) ? 0 : 1;\n",
-) or die <<"MSG";
-
-ERROR: Wrong version or unable to check version of MariaDB/MySQL include files.
-To build DBD::MariaDB it is needed MariaDB or MySQL client >= 4.1.8.
-
-MSG
-
 print "Looks good.\n\n";
 
-my $have_embedded = check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags),
-  header => \@mysql_headers,
-  function => 'return mysql_embedded() ? 0 : 1;',
-);
-
-print "Embedded server: " . ($have_embedded ? "supported" : "not supported by client library") . "\n\n";
-
-my $have_get_charset_number = check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags),
-  header => \@mysql_headers,
-  function => 'unsigned int get_charset_number(const char *cs_name, unsigned int cs_flags); mysql_server_init(-1, 0, 0); get_charset_number("utf8", 32); return 0;',
-);
-
-my $have_get_option = check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags),
-  header => \@mysql_headers,
-  function => 'MYSQL mysql; char buf[1024]; mysql_server_init(-1, 0, 0); mysql_init(&mysql); mysql_get_option(&mysql, 0, &buf); return 0;',
-);
-
-my $have_deinitialize_ssl = check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags),
-  header => \@mysql_headers,
-  function => 'mariadb_deinitialize_ssl = 0; return 0;',
-);
-
-# Check if mysql_server_end() deinitialize OpenSSL library functions
-# See: https://github.com/perl5-dbi/DBD-MariaDB/issues/119
-my $have_problem_with_openssl = !check_lib(
-  LIBS => (join ' ', @libdirs, $main_lib),
-  ccflags => $opt->{cflags},
-  ldflags => (join ' ', @libdirs, @libs, @ldflags, $Config{perllibs}),
-  header => \@mysql_headers,
-  function => << 'EOF'
-
-#ifndef _WIN32
-  #ifndef _GNU_SOURCE
-    #define _GNU_SOURCE
-  #endif
-  #include <dlfcn.h>
-  #ifndef RTLD_DEFAULT
-    #define RTLD_DEFAULT ((void *)0)
-  #endif
-#endif
-
-int (*OPENSSL_init_ssl_func)(unsigned long long, const void *);
-void (*SSL_load_error_strings_func)(void);
-int (*SSL_library_init_func)(void);
-void *(*SSL_CTX_new_func)(const void *method);
-void (*SSL_CTX_free_func)(void *ctx);
-const void *(*TLS_method_func)(void);
-const void *method1;
-const void *method2;
-void *ctx1;
-void *ctx2;
-
-#ifdef _WIN32
-
-  BOOL (WINAPI *EnumProcessModules_func)(HANDLE, HMODULE *, DWORD, LPDWORD);
-  HMODULE psapi_lib;
-  DWORD size, i;
-  HMODULE *modules;
-
-  modules = NULL;
-  psapi_lib = LoadLibraryA("Psapi.dll");
-  if (psapi_lib) {
-    EnumProcessModules_func = (BOOL (WINAPI *)(HANDLE, HMODULE *, DWORD, LPDWORD))GetProcAddress(psapi_lib, "EnumProcessModules");
-    if (EnumProcessModules_func) {
-      if (EnumProcessModules_func((HANDLE)-1, NULL, 0, &size)) {
-        modules = (HMODULE *)GlobalAlloc(GPTR, size);
-        if (modules && !EnumProcessModules_func((HANDLE)-1, modules, size, &size))
-          modules = NULL;
-      }
-    }
-  }
-
-  #define SYMBOL(var, type, sym) do { \
-      var = (type)GetProcAddress(GetModuleHandle(NULL), sym); \
-      if (!var) { \
-        if (!modules) \
-          return 1; \
-        for (i = 0; i < size/sizeof(*modules); ++i) { \
-          var = (type)GetProcAddress(modules[i], sym); \
-          if (var) \
-            break; \
-        } \
-      } \
-    } while (0)
-
-#else
-
-  #define SYMBOL(var, type, sym) do { var = (type)dlsym(RTLD_DEFAULT, sym); } while (0)
-
-#endif
-
-SYMBOL(OPENSSL_init_ssl_func, int (*)(unsigned long long, const void *), "OPENSSL_init_ssl");
-SYMBOL(SSL_library_init_func, int (*)(void), "SSL_library_init");
-if (!OPENSSL_init_ssl_func && !SSL_library_init_func)
-  return 0;
-SYMBOL(SSL_load_error_strings_func, void (*)(void), "SSL_load_error_strings");
-if (!OPENSSL_init_ssl_func && !SSL_load_error_strings_func)
-  return 0;
-SYMBOL(SSL_CTX_new_func, void *(*)(const void *), "SSL_CTX_new");
-if (!SSL_CTX_new_func)
-  return 0;
-SYMBOL(SSL_CTX_free_func, void (*)(void *), "SSL_CTX_free");
-if (!SSL_CTX_free_func)
-  return 0;
-
-SYMBOL(TLS_method_func, const void *(*)(void), "TLS_method");
-if (!TLS_method_func)
-  SYMBOL(TLS_method_func, const void *(*)(void), "TLSv1_2_method");
-if (!TLS_method_func)
-  SYMBOL(TLS_method_func, const void *(*)(void), "TLSv1_1_method");
-if (!TLS_method_func)
-  SYMBOL(TLS_method_func, const void *(*)(void), "TLSv1_method");
-if (!TLS_method_func)
-  return 0;
-
-if (OPENSSL_init_ssl_func) {
-  OPENSSL_init_ssl_func(0, (void *)0);
-} else {
-  SSL_library_init_func();
-  SSL_load_error_strings_func();
-}
-
-method1 = TLS_method_func();
-if (!method1)
-  return 1;
-ctx1 = SSL_CTX_new_func(method1);
-if (!ctx1)
-  return 1;
-
-mysql_server_init(-1, 0, 0);
-mysql_server_end();
-
-method2 = TLS_method_func();
-if (!method2)
-  return 1;
-ctx2 = SSL_CTX_new_func(method2);
-if (!ctx2)
-  return 1;
-
-SSL_CTX_free_func(ctx1);
-SSL_CTX_free_func(ctx2);
-
-return 0;
-
-EOF
-);
-
-print "Client library deinitialize OpenSSL library functions: " . ($have_problem_with_openssl ? "yes" : "no") . "\n\n";
-
 my $fileName = File::Spec->catfile("t", "MariaDB.mtest");
 (open(FILE, ">$fileName") &&
  (print FILE ("{ local " . Data::Dumper->Dump([$opt], ["opt"]) .
@@ -440,11 +255,6 @@ my $fileName = File::Spec->catfile("t", "MariaDB.mtest");
 my $cflags = "-I\$(DBI_INSTARCH_DIR) $opt->{'cflags'}";
 $cflags .= " -DHAVE_DBI_1_634" if eval { DBI->VERSION(1.634) };
 $cflags .= " -DHAVE_DBI_1_642" if eval { DBI->VERSION(1.642) };
-$cflags .= " -DHAVE_EMBEDDED" if $have_embedded;
-$cflags .= " -DHAVE_GET_CHARSET_NUMBER" if $have_get_charset_number;
-$cflags .= " -DHAVE_GET_OPTION" if $have_get_option;
-$cflags .= " -DHAVE_DEINITIALIZE_SSL" if $have_deinitialize_ssl;
-$cflags .= " -DHAVE_PROBLEM_WITH_OPENSSL" if $have_problem_with_openssl;
 my %o =
   (
     'NAME' => 'DBD::MariaDB',
@@ -589,7 +399,6 @@ my %o =
       'Config' => 0,
       'Data::Dumper' => 0,
       'DBI' => '1.608',
-      'Devel::CheckLib' => '1.12',
       'ExtUtils::MakeMaker' => 0,
       'File::Spec' => 0,
       'Getopt::Long' => 0,
@@ -757,55 +566,8 @@ sub Configure {
                     push @ldflags, $_;
                 }
             }
-            my $check_passed;
-            if (defined $main_lib) {
-                my $function = "\n#ifndef MYSQL_VERSION_ID\n#include <mysql_version.h>\n#endif\n";
-                if ($_ eq 'libmysqld-libs') {
-                    # libmariadbd.so from MariaDB 10.3.1 - 10.3.7 is broken, unusable
-                    # and always crash in mysql_real_connect() function, so avoid its usage
-                    # https://jira.mariadb.org/browse/MDEV-16478
-                    $function .= "\n#if defined(MARIADB_BASE_VERSION) || defined(MARIADB_PACKAGE_VERSION)\nif (mysql_get_client_version() >= 100301 && mysql_get_client_version() < 100308) return 1;\n#endif\n";
-                    # libmysqld.a from MySQL 8.x is broken too
-                    $function .= "\n#if !defined(MARIADB_BASE_VERSION) && !defined(MARIADB_PACKAGE_VERSION)\nif (mysql_get_client_version() >= 80000) return 1;\n#endif\n";
-                }
-                # MariaDB Connector/C 3.1.10+ has broken mysql_get_client_version() function, so use mariadb_get_infov(MARIADB_CLIENT_VERSION_ID) instead
-                $function .= "size_t version;\n";
-                $function .= "#if defined(MARIADB_PACKAGE_VERSION) && defined(MARIADB_PACKAGE_VERSION_ID) && MARIADB_PACKAGE_VERSION_ID >= 30000\n";
-                $function .= "if (mariadb_get_infov((void *)0, MARIADB_CLIENT_VERSION_ID, &version) != 0)\n";
-                $function .= "#endif\n";
-                $function .= "version = mysql_get_client_version();\n";
-                $function .= 'return (version == MYSQL_VERSION_ID) ? 0 : 1;';
-                # libmysqld is built using g++ rather than gcc and sometimes
-                # we have to use libstdc++ to resolve linking problems
-                foreach my $add_ldflags (undef, '-lstdc++') {
-                    my $ldflags = join ' ', @ldflags, (defined $add_ldflags ? $add_ldflags : ());
-                    if ($Config{usedl}) {
-                        # check that we can create a shared library (not executable)
-                        check_lib(
-                            LIBS => (join ' ', @libdirs, $main_lib),
-                            ldflags => (join ' ', @libdirs, $ldflags, $Config{lddlflags}),
-                            ccflags => (join ' ', $opt->{cflags}, $Config{cccdlflags}),
-                            header => \@mysql_headers,
-                            function => $function,
-                            not_execute => 1,
-                        ) or next;
-                    }
-                    # and now create executable and do real version check
-                    check_lib(
-                        LIBS => (join ' ', @libdirs, $main_lib),
-                        ldflags => (join ' ', @libdirs, $ldflags),
-                        ccflags => $opt->{cflags},
-                        header => \@mysql_headers,
-                        function => $function,
-                    ) or next;
-                    $str .= ' ' . $add_ldflags if defined $add_ldflags;
-                    $check_passed = 1;
-                    last;
-                }
-            }
             # libs param is checked as last, so ensure that mysql_config
             # error is reported back to the caller
-            next unless $_ eq 'libs' or $check_passed;
             $opt->{$param} = $str;
             $source->{$param} = "mysql_config";
             return;
